#' e__move_column
#'
#' @param session_name TODO
#' @param current_row TODO
#' @param df_obj TODO
#' @param outer_env TODO
#'
#' @return TODO

e__move_column <- function(session_name, current_row, df_obj, outer_env=totem, placement) {
  require(RGtk2)
  
  #Get selection
  selection <- as.character(current_row$column)
  #Get column order of dataset
  st <- RGtk2::gtkEntryGetText(outer_env[[session_name]]$data_view_list$select_entry)
  if (st != "") {
    dataset2 <- select(df_obj[0, ], st)
    col_order <- colnames(dataset2)
  } else {
    col_order <- colnames(df_obj[0, ])
  }

  #Handle moving column before target
  if (placement == 0) {
    #Generate dialog to ask about placement
    dialog <- gtkMessageDialog(
      parent = outer_env[[session_name]]$windows$main_window, 
      flags = "destroy-with-parent", 
      type = "question", 
      buttons = "ok-cancel", 
      paste0("Select a column to move ", toupper(selection), " before"))
    
    #Add options
    choices <- col_order
    radio_buttons <- NULL
    vbox <- gtkVBox(F, 0)
    for (choice in choices) {
      button <- gtkRadioButton(radio_buttons, choice)
      vbox$add(button)
      radio_buttons <- c(radio_buttons, button)
    }
    
    #Make a frame for the buttons
    frame <- gtkFrame(paste0("Column to move ", toupper(selection), " before"))
    frame$add(vbox)
    dialog[["vbox"]]$add(frame)
    #Require response before interacting with table
    response <- dialog$run()
  
    #Find selection
    for (i in 1:length(radio_buttons)) {
      if (gtkToggleButtonGetActive(radio_buttons[[i]])) {
        selectn <- i
      }
    }
    selection <- choices[selectn]
    
    #Destroy dialog box
    gtkWidgetDestroy(dialog)
    
    if (response %in% c(GtkResponseType["close"], GtkResponseType["delete-event"], GtkResponseType["cancel"]) == F) {
      utils::writeClipboard(str = "hello world", format = 1)
    }
  }
}
